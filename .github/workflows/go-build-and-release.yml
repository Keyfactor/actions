name: Go build placeholder

on:
  workflow_call:
    inputs:
      release_version:
        description: Condition based on release branch build
        required: false
        type: string

    secrets:
      token:
        description: 'Secret token from caller workflow to access private packages'
        required: true
      gpg_key:
        description: 'GPG Private Key'
        required: true
      gpg_pass:
        description: 'GPG Passphrase'
        required: true

jobs:
  call-version-file-exists:
    outputs:
      version-file-exists: ${{ steps.check_files.outputs.files_exists }}
    runs-on: ubuntu-latest
    name: Check for version.go file
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: "pkg/version/version.go" # Make this file a property in the manifest and input to the workflow

  run-goreleaser:
    needs: call-version-file-exists
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Allow goreleaser to access older tag information.
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
      - name: get-is-release
        run: |
          if [[ ("${{ github.event_name }}" == "pull_request") && "${{ inputs.release_version }}" != "" ]]; then
            echo "GO_ARGS=release --clean" | tee -a "$GITHUB_ENV" 
            echo "VERSION=${{ inputs.release_version }}" | tee -a "$GITHUB_ENV"  | tee -a "$GITHUB_STEP_SUMMARY"
          else
            echo "GO_ARGS=build --snapshot" | tee -a "$GITHUB_ENV" 
            echo "VERSION=0.0.0" | tee -a "$GITHUB_ENV"  | tee -a "$GITHUB_STEP_SUMMARY"
          fi
      - name: Update version.go
        if: github.event_name == 'pull_request' && needs.call-goreleaser-exists.outputs.version-file-exists == 'true' 
        run: |
          sed -i "s/const VERSION = .*/const VERSION = \"${{ inputs.release_version }}\"/" pkg/version/version.go
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.gpg_key }}
          passphrase: ${{ secrets.gpg_pass }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          args: ${{ env.GO_ARGS }}
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PAT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GPG_TTY: $(tty)
          Version: ${{ env.VERSION }}
