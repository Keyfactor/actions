name: Build dotnet solution and potentially upload the release
on:
  workflow_call:
    inputs:
      release_version:
        description: The release version to use when publishing a build
        required: false
        type: string
        default: 1.0.0 # for non-released builds
      release_url:
        description: The url to upload a publsihed release
        required: false # leave empty for non-release build
        type: string
      release_dir:
        description: The relative directory inside the repo where the build artifacts to publish for release will be located
        required: false 
        type: string
      release_project:
        description: The relative file location for csproj
        required: false 
        type: string
      integration_type:
        description: The extension integration_type
        required: true
        type: string
    secrets:
      token:
        description: 'Secret token from caller workflow to access private packages'
        required: true


jobs:
  dotnet-build-and-release:
    runs-on: windows-latest
    steps:
      - uses: keyfactor/checkout@v4

      - name: Setup dotnet
        uses: keyfactor/setup-dotnet@v4
        with:
          dotnet-version: |
            3.1.x
            6.0.x
            8.0.x

      - name: Setup MSBuild
        uses: keyfactor/setup-msbuild@v2

      - name: Setup build environment
        id: setup_env
        run: |
            $repoName = "${{ github.repository }}".Split("/")
            echo "Repo Name: $($repoName[-1])"
            echo "REPO_NAME=$($repoName[-1])" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append

            $slnPath = (Get-ChildItem -Include *.sln -File -Recurse).fullname
            echo "Solution File Path: ${slnPath}"
            echo "SOLUTION_PATH=${slnPath}" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append

            echo "release_dir: ${{ inputs.release_dir }}"

            $creatingRelease = ("${{ inputs.release_url }}".Trim().Length -gt 0) -and ("${{ inputs.release_dir }}".Trim().Length -gt 0)
            echo "Flagged to create release: ${creatingRelease}"
            echo "CREATE_RELEASE=${creatingRelease}" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append

            $isPreRelease = "${{ github.base_ref }}".StartsWith("release-") -and [System.Convert]::ToBoolean("${{ github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize') }}")
            echo "Pre-release flagged: $($isPreRelease)"
            echo "IS_PRE_RELEASE=$($isPreRelease)" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append

            dotnet nuget add source https://nuget.pkg.github.com/Keyfactor/index.json -n github -u ${{ github.actor }} -p ${{ secrets.token }} --store-password-in-clear-text
            nuget restore $slnPath -Project2ProjectTimeout 240

      - name: Increment Assembly Version
        if: env.CREATE_RELEASE == 'True'
        run: |
            $VersionRegex = "\d+\.\d+\.\d+"
            $assemblyInfoFiles = (Get-ChildItem -Include AssemblyInfo.cs -File -Recurse).fullname
            if ($assemblyInfoFiles -ne $null)
            {
              $newVer = "${{ inputs.release_version || '1.0.0' }}".TrimStart('v').Split('-')[0]
              echo "Prepared to overwrite Assembly version to: ${newVer}"
              foreach ($assemblyInfoFile in $assemblyInfoFiles)
              {
                $filecontent = Get-Content($assemblyInfoFile)
                attrib $assemblyInfoFile -r
                $filecontent -replace $VersionRegex, $newVer | Out-File $assemblyInfoFile
              }
            }

      - name: Execute MSBuild Commands
        run: |
          $newVer = "${{ inputs.release_version || '1.0.0' }}".TrimStart('v').Split('-')[0]
          MSBuild.exe $Env:SOLUTION_PATH -p:RestorePackagesConfig=false -p:Configuration=Release -p:Version=$newVer


      - name: Read Target Frameworks
        id: read_target_frameworks  
        shell: pwsh
        run: |
          [xml]$csproj = Get-Content "${{ inputs.release_project }}"
          $targetFrameworks = $csproj.Project.PropertyGroup.TargetFrameworks
          if ($targetFrameworks -eq $null) {
            $targetFrameworks = $csproj.Project.PropertyGroup.TargetFramework
          }
          echo "release_platforms: $targetFrameworks"
          echo "release_platforms=$targetFrameworks" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Archive Files
        if: success() && env.CREATE_RELEASE == 'True'
        shell: pwsh
        run: |
          $platforms = "${{ env.release_platforms }}".Split(';')
          $outputDir = "${{ github.workspace }}\zip\Keyfactor"
          echo "outputDir=$outputDir" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append
          md $outputDir
          foreach ($platform in $platforms) {
            $sourcePath = "${{ github.workspace }}\${{ inputs.release_dir }}\$platform\"
            $zipPath = "$outputDir\${{ env.REPO_NAME }}_$platform.zip"
            Get-ChildItem -File -Path $sourcePath
            Compress-Archive -Path $sourcePath -DestinationPath $zipPath -Force -Verbose
          }
          Get-ChildItem -File -Path $outputDir
      # - name: Check for manifest in zip files
      #   if: success() && env.CREATE_RELEASE == 'True' && inputs.integration_type == 'orchestrator'
      #   shell: pwsh
      #   run: |
      #     $zipFiles = Get-ChildItem -Path "${{ github.workspace }}\zip\Keyfactor" -Filter '*.zip'
      #     foreach ($zipFile in $zipFiles) {
      #       $zipPath = $zipFile.FullName
      #       Write-Host "Checking manifest.json in $zipPath"
      
      #       # Extract the list of files in the zip to check for manifest.json
      #       $zipContent = [System.IO.Compression.ZipFile]::OpenRead($zipPath)
      #       $manifestExists = $false
      #       foreach ($entry in $zipContent.Entries) {
      #         if ($entry.FullName -eq "manifest.json") {
      #           $manifestExists = $true
      #           break
      #         }
      #       }
      #       $zipContent.Dispose()

      #       if (-not $manifestExists) {
      #         Write-Host "manifest.json not found in $zipPath"
      #         exit 1
      #       } else {
      #         Write-Host "manifest.json found in $zipPath"
      #       }
      #     }

      # - name: Upload Release Assets
      #   if: success() && env.CREATE_RELEASE == 'True'
      #   uses: keyfactor/upload-release-assets@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ inputs.release_url }}
      #     asset_path: "${{ env.outputDir }}\\test-orch-mh_*.zip"
      #     asset_name: "test-orch-mh_*.zip"
      #     asset_content_type: application/zip

      - name: Release Asset(s)
        uses: softprops/action-gh-release@v2
        if: success() && env.CREATE_RELEASE == 'True'
        with:
          body_path: ${{ env.outputDir }}\\test-orch-mh_*.zip
          repository: keyfactor/test-orch-mh
          files: ${{ env.outputDir }}\\test-orch-mh_*.zip
          append_body: true
          tag_name: ${{ inputs.release_version }}
          token: ${{ secrets.token }}

      # - name: Delete Failed Release
      #   if: failure() && env.CREATE_RELEASE == 'True'
      #   id: delete-failed-release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh release delete ${{ inputs.release_version }} --yes --cleanup-tag  

