name: Build dotnet solution and potentially upload the release
on:
  workflow_call:
    inputs:
      release_version:
        description: The release version to use when publishing a build
        required: false
        type: string
        default: 1.0.0 # for non-released builds
      release_url:
        description: The url to upload a publsihed release
        required: false # leave empty for non-release build
        type: string
      release_dir:
        description: The relative directory inside the repo where the build artifacts to publish for release will be located
        required: false # leave empty for non-release build
        type: string
    secrets:
      token:
        description: 'Secret token from caller workflow to access private packages'
        required: true


jobs:
  dotnet-build-and-release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            3.1.x
            6.0.x

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Setup build environment
        id: setup_env
        run: |
            $repoName = "${{ github.repository }}".Split("/")
            echo "Repo Name: $($repoName[-1])"
            echo "REPO_NAME=$($repoName[-1])" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append

            $slnPath = (Get-ChildItem -Include *.sln -File -Recurse).fullname
            echo "Solution File Path: ${slnPath}"
            echo "SOLUTION_PATH=${slnPath}" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append

            echo "release_dir: ${{ inputs.release_dir }}"

            $creatingRelease = ("${{ inputs.release_url }}".Trim().Length -gt 0) -and ("${{ inputs.release_dir }}".Trim().Length -gt 0)
            echo "Flagged to create release: ${creatingRelease}"
            echo "CREATE_RELEASE=${creatingRelease}" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append

            dotnet nuget add source https://nuget.pkg.github.com/Keyfactor/index.json -n github -u ${{ github.actor }} -p ${{ secrets.token }} --store-password-in-clear-text
            nuget restore $slnPath -Project2ProjectTimeout 240

      - name: Increment Assembly Version
        if: env.CREATE_RELEASE == 'True'
        run: |
            $VersionRegex = "\d+\.\d+\.\d+"
            $assemblyInfoFiles = (Get-ChildItem -Include AssemblyInfo.cs -File -Recurse).fullname
            if ($assemblyInfoFiles -ne $null)
            {
              $newVer = "${{ inputs.release_version || '1.0.0' }}".TrimStart('v').Split('-')[0]
              echo "Prepared to overwrite Assembly version to: ${newVer}"
              foreach ($assemblyInfoFile in $assemblyInfoFiles)
              {
                $filecontent = Get-Content($assemblyInfoFile)
                attrib $assemblyInfoFile -r
                $filecontent -replace $VersionRegex, $newVer | Out-File $assemblyInfoFile
              }
            }

      - name: Execute MSBuild Commands
        run: |
          $newVer = "${{ inputs.release_version || '1.0.0' }}".TrimStart('v').Split('-')[0]
          MSBuild.exe $Env:SOLUTION_PATH -p:RestorePackagesConfig=false -p:Configuration=Release -p:Version=$newVer
      
      - name: Archive Files
        if: success() && env.CREATE_RELEASE == 'True'
        run: |
           md ${{ github.workspace }}\zip\Keyfactor
           Compress-Archive -Path `
           ${{ github.workspace }}\${{ inputs.release_dir }}\ `
           -DestinationPath ${{ github.workspace }}\zip\Keyfactor\$Env:REPO_NAME.zip -Force

      - name: Upload Release Asset (x64)
        if: success() && env.CREATE_RELEASE == 'True'
        id: upload-release-asset-x64
        uses: keyfactor/upload-release-asset@v1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ inputs.release_url }}
          asset_path: ${{ github.workspace }}\zip\Keyfactor\${{ env.REPO_NAME}}.zip
          asset_name: ${{ env.REPO_NAME}}_${{ inputs.release_version }}.zip
          asset_content_type: application/zip
