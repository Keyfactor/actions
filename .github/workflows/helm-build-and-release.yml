name: Container Build

on:
  workflow_call:
    inputs:
      release_version:
        description: Condition based on release branch build
        required: false
        type: string
      platform_list:
        required: true
        description: platform name from input
        type: string # like linux/amd64,linux/arm64

    secrets:
      token:
        description: 'Secret token from caller workflow to access private packages'
        required: true
env:
  REGISTRY: keyfactor

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      platform_matrix: ${{ steps.vars.outputs.platform_matrix }}
    steps:
      - name: Create an array from platform_list input 
        id: vars
        run: echo "platform_matrix=$(jq 'split(",")' -Rc <(echo '${{ inputs.platform_list }}'))" | tee -a $GITHUB_OUTPUT | tee -a $GITHUB_STEP_SUMMARY
  get-release-values:
    name: Get Release Properties
    runs-on: ubuntu-latest
    outputs:
      PUSH_IMAGE: ${{ steps.set-vars.outputs.PUSH_IMAGE }}  
    steps:
      - name: Determine IMAGE_PUSH and VERSION
        id:  set-vars
        run: |
          if [[ ("${{ github.event_name }}" == "pull_request") && "${{ inputs.release_version }}" != "" ]]; then
            echo "PUSH_IMAGE=true" | tee -a "$GITHUB_OUTPUT" | tee -a "$GITHUB_STEP_SUMMARY"
            echo "VERSION=${{ inputs.release_version }}" | tee -a "$GITHUB_OUTPUT" | tee -a "$GITHUB_STEP_SUMMARY"
          else
            echo "PUSH_IMAGE=false" | tee -a "$GITHUB_OUTPUT" | tee -a "$GITHUB_STEP_SUMMARY"
            echo "VERSION=0.0.0" | tee -a "$GITHUB_OUTPUT" | tee -a "$GITHUB_STEP_SUMMARY"
          fi

  run-container-build:
    name: Build Containers
    runs-on: ubuntu-latest
    needs: [setup,get-release-values]
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.setup.outputs.platform_matrix) }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Set IMAGE_NAME
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      # Checkout code
      # https://github.com/keyfactor/checkout
      - name: Checkout code
        uses: keyfactor/checkout@v4

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: keyfactor/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} 
          tags: |
            type=semver,pattern={{raw}},value=${{ inputs.release_version }}

      # Set up QEMU
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: keyfactor/setup-qemu-action@v3.0.0

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: keyfactor/setup-buildx-action@v3.3.0

      # Login to Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: keyfactor/login-action@v3.2.0
        with:
          # registry: ${{ env.REGISTRY }} # Remove for dockerhub
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PWD }}

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build
        uses: keyfactor/build-push-action@v6.0.1
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ needs.get-release-values.outputs.PUSH_IMAGE == 'true' }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true

      # Export digest
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      # Upload digest
      - name: Upload digest
        uses: keyfactor/upload-artifact@v4
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: [get-release-values, run-container-build]
    steps:
      - name: Set IMAGE_NAME
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
          echo "PUSH_IMAGE = ${{ needs.get-release-values.outputs.PUSH_IMAGE }}"

      # Download digests
      # https://github.com/actions/download-artifact
      - name: Download digests
        uses: keyfactor/download-artifact@v4.1.7
        with:
          name: digests
          path: /tmp/digests

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: keyfactor/setup-buildx-action@v3.3.0

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: keyfactor/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{raw}},value=${{ inputs.release_version }}

      # Login to Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: keyfactor/login-action@v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Create manifest list and push if: needs.get-release-values.outputs.PUSH_IMAGE == true
      - name: Create manifest list and push
        if: needs.get-release-values.outputs.PUSH_IMAGE == 'true'
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        if: needs.get-release-values.outputs.PUSH_IMAGE == 'true'
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  helm:
    runs-on: ubuntu-latest
    needs: [get-release-values]
    if: needs.get-release-values.outputs.PUSH_IMAGE == 'true'
    steps:
      - name: Set IMAGE_NAME
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      # Checkout code
      # https://github.com/keyfactor/checkout
      - name: Checkout code
        uses: keyfactor/checkout@v4

      # Extract metadata (tags, labels) to use in Helm chart
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: keyfactor/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set version from DOCKER_METADATA_OUTPUT_VERSION as environment variable
      - name: Set Version
        run: |
          echo "VERSION=${DOCKER_METADATA_OUTPUT_VERSION:8}.0" >> $GITHUB_ENV # Eventually will build this into Keyfactor bootstrap

      # Change version and appVersion in Chart.yaml to the tag in the closed PR
      - name: Update Helm App/Chart Version
        shell: bash
        run: |
          sed -i "s/^version: .*/version: ${{ inputs.release_version }}/g" deploy/charts/${{ env.IMAGE_NAME }}/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: \"v${{ inputs.release_version }}\"/g" deploy/charts/${{ env.IMAGE_NAME }}/Chart.yaml

      # Setup Helm
      # https://github.com/Azure/setup-helm
      - name: Install Helm
        uses: keyfactor/setup-helm@v4.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Helm requires an ident name to be set for chart-releaser to work
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      # Build and release Helm chart to GitHub Pages
      # https://github.com/helm/chart-releaser-action
      - name: Run chart-releaser
        uses: keyfactor/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          charts_dir: deploy/charts