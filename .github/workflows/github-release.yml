name: Create GitHub release version and location
on:
  workflow_call:
    outputs:
      release_version:
        description: The computed release version for the release (or pre-release) being built
        value: ${{ jobs.create-github-release.outputs.release_version }}
      release_url:
        description: The upload URL for build artifacts for this release
        value: ${{ jobs.create-github-release.outputs.release_url }}
  pull_request:
    types: [opened, closed, synchronize]
  push:

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      PR_BASE_REF: ${{ steps.set-outputs.outputs.PR_BASE_REF }}
      PR_COMMIT_SHA: ${{ steps.set-outputs.outputs.PR_COMMIT_SHA }}
      GITHUB_SHA: ${{ steps.set-outputs.outputs.GITHUB_SHA }}
      PR_BASE_TAG: ${{ steps.set-outputs.outputs.PR_BASE_TAG }}
      IS_FULL_RELEASE:  ${{ steps.set-outputs.outputs.IS_FULL_RELEASE }}
      IS_PRE_RELEASE:  ${{ steps.set-outputs.outputs.IS_PRE_RELEASE }}
      INC_LEVEL: ${{ steps.set-outputs.outputs.INC_LEVEL }}
      IS_RELEASE_BRANCH: ${{ steps.set-outputs.outputs.IS_RELEASE_BRANCH }}
      IS_HOTFIX: ${{ steps.set-outputs.outputs.IS_HOTFIX }}
      LATEST_TAG: ${{ steps.set-outputs.outputs.LATEST_TAG }}
      

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Display base.ref from Pull Request
        if: github.event_name == 'pull_request'
        id: display-from-pr
        run: |
          echo "Event: ${{ github.event_name }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "Event Action: ${{ github.event.action }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "PR_BASE_REF=${{ github.event.pull_request.base.ref }}" | tee -a "$GITHUB_ENV" | tee -a $GITHUB_STEP_SUMMARY
          echo "PR_STATE=${{ github.event.pull_request.state }}" | tee -a "$GITHUB_ENV" | tee -a $GITHUB_STEP_SUMMARY
          echo "PR_MERGED=${{ github.event.pull_request.merged }}" | tee -a "$GITHUB_ENV" | tee -a $GITHUB_STEP_SUMMARY
          echo "PR_COMMIT_SHA=${{ github.event.pull_request.merge_commit_sha }}" | tee -a "$GITHUB_ENV" | tee -a $GITHUB_STEP_SUMMARY
          echo "GITHUB_SHA=${{ github.sha }}" | tee -a "$GITHUB_ENV" | tee -a $GITHUB_STEP_SUMMARY
          baseref="${{ github.event.pull_request.base.ref }}"
          basetag="${baseref#release-}"
          echo "PR_BASE_TAG=$basetag" | tee -a "$GITHUB_ENV" | tee -a $GITHUB_STEP_SUMMARY

      - name: Display base_ref from Push Event
        if: github.event_name == 'push'
        id: display-from-push
        run: |
          echo "Branch Ref: ${{ github.ref }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "Event: ${{ github.event_name }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "github.sha: ${{ github.sha }}" | tee -a $GITHUB_STEP_SUMMARY

      - name: Find Latest Tag
        if: github.event_name == 'pull_request'
        id: find-latest-tag
        run: |
          prbasetag=${{env.PR_BASE_TAG}}
          git fetch --tags
          allBranchTags=`git tag --sort=-v:refname | grep $prbasetag`
          allRepoTags=`git tag --sort=-v:refname`
          branchTagBase=`git tag --sort=-v:refname | grep $prbasetag | grep -o '^[0-9.]*' | head -n 1`
          latestTagBase=`git tag --sort=-v:refname | grep -o '^[0-9.]*' | head -n 1`
          latestBranchTag=`git tag --sort=-v:refname | grep $prbasetag | grep "^$branchTagBase" | head -n 1`
          latestReleasedTag=`git tag --sort=-v:refname | grep $prbasetag | grep "^$latestTagBase$" | head -n 1`
          # If the *TagBase values are not found in the list of tags it means no final release was produced and the latest*Tag vars will be empty
          if [[ "$latestReleasedTag" == "" ]]; then
            latestTag=$latestBranchTag;
          else
            latestTag=$latestReleaseTag
          fi
          echo "LATEST_TAG=${latestTag}"  | tee -a "$GITHUB_ENV"
          if [[ "$latestTagBase" == *"$branchTagBase" ]]; then
              hf="False"
          else
              hf="True"
          fi
          # The intention is to use this to set the make_latest:false property when 
          # dispatching the create-release action, but it is not *yet* a configurable option
          echo "IS_HOTFIX=$hf" | tee -a "$GITHUB_ENV"

  build-selector:
    needs: get-versions
    runs-on: ubuntu-latest
    outputs:
      EVENT_TYPE: ${{ steps.set-outputs.outputs.EVENT_TYPE }}

    steps:
      - name: Just Run Build on Push
        if: github.event_name == 'push'
        id: push-build
        run: |
          echo "Just run a build on sha ${{ github.sha }} with no delivery/release artifacts"
          echo "EVENT_TYPE=push" | tee -a $GITHUB_OUTPUT

      - name: Create Prerelease Candidate Build
        if: needs.get-versions.outputs.IS_PRE_RELEASE == 'True'
        id: prerelease-build
        run: |
          echo "Just run a prerelease build on sha ${{ github.sha }} with delivery/release artifacts to .rc"
          echo "EVENT_TYPE=pull_request" | tee -a $GITHUB_OUTPUT
          
      - name: Create Release Build
        if: needs.get-versions.outputs.IS_FULL_RELEASE == 'True'
        id: full-release-build
        run: |
          echo "Run a Full Release build on sha ${{ github.sha }} with delivery/release artifacts to final build num"
          echo "EVENT_TYPE=pull_request" | tee -a $GITHUB_OUTPUT

  create-github-release:
    needs: [get-versions, build-selector]
    if: github.event_name == 'pull_request' && needs.get-versions.outputs.IS_RELEASE_BRANCH == 'True'
    outputs:
      release_version: ${{ steps.create_release.outputs.current_tag }}
      release_url: ${{ steps.create_release.outputs.upload_url }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "INC_LEVEL=${{ needs.get-versions.outputs.INC_LEVEL}}"
      - name: Check if initial release
        if:  needs.get-versions.outputs.LATEST_TAG == ''        
        run: |
          echo "INITIAL_VERSION=${{needs.get-versions.outputs.PR_BASE_TAG}}.0-rc.0" | tee -a "$GITHUB_STEP_SUMMARY" | tee -a "$GITHUB_ENV"
          echo "MANUAL_VERSION=${{needs.get-versions.outputs.PR_BASE_TAG}}.0-rc.0" | tee -a "$GITHUB_ENV"
      - name: Set semver info
        id: set-semver-info
        if:  needs.get-versions.outputs.LATEST_TAG != ''        
        uses: fiddlermikey/action-bump-semver@main
        with:
          current_version: ${{ needs.get-versions.outputs.LATEST_TAG}}
          level: ${{ needs.get-versions.outputs.INC_LEVEL}}
          preID: rc
      - name: Show next sem-version
        if:  needs.get-versions.outputs.LATEST_TAG != ''        
        run: |
          echo "MANUAL_VERSION=${{ steps.set-semver-info.outputs.new_version }}" > "$GITHUB_ENV"
      - run: |
          echo "Next version: ${{ env.MANUAL_VERSION }}" | tee -a "$GITHUB_STEP_SUMMARY"
      - name: Create new release
        id: create_release
#        uses: keyfactor/action-create-release@upd-deprecated
        uses: keyfactor/action-create-release@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MANUAL_VERSION: ${{ env.MANUAL_VERSION }}
        if: github.event_name == 'pull_request' && needs.get-versions.outputs.IS_RELEASE_BRANCH == 'True'
        with:
          release_name:  ${{ env.MANUAL_VERSION }}
          body: |
            [Changelog](/./CHANGELOG.md) 
            [Readme](/./README.md) 
            For the latest README.md updates visit the [Main Page](/../main) for this repository
          draft: false
          prerelease: ${{ needs.get-versions.outputs.IS_PRE_RELEASE == 'True'}}
          prerelease_suffix: rc
          tag_name: ${{ env.MANUAL_VERSION }}
          auto_increment_type: ${{ (needs.get-versions.outputs.IS_PRE_RELEASE == 'True') && 'prerelease' || 'patch' }}
          tag_schema: semantic
          commitish: ${{ github.sha }}
