name: Create GitHub release version and location
on:
  workflow_call:
    outputs:
      release_version:
        description: The computed release version for the release (or pre-release) being built
        value: ${{ jobs.create-github-release.outputs.release_version }}
      release_url:
        description: The upload URL for build artifacts for this release
        value: ${{ jobs.create-github-release.outputs.release_url }}

jobs:
  create-github-release:
    runs-on: windows-latest
    outputs:
      release_version: ${{ steps.create_release.outputs.current_tag }}
      release_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      # determines values of repo name and major.minor release version from branch, and if build should be Releasor Pre-Release
      # full release is run on on Push to a release- branch, and requires that branch protection prevent regular pushes from triggering a release
      # there is no clear way to capture the 'pull_request' action closing with a merge when the calling workflow has a check for 'push' - the push of the merge is captured and not the pull_request closing
      - name: Get release values from workflow state
        run: |
            $repoName = "${{ github.repository }}".Split("/")
            echo "Repo Name: $($repoName[-1])"
            echo "REPO_NAME=$($repoName[-1])" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append

            $relVersion = "${{ github.base_ref }}".Split("-")
            echo "Release Version: $($relVersion[-1])"
            echo "RELEASE_VERSION=$($relVersion[-1])" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append

            $isPreRelease = "${{ github.base_ref }}".StartsWith("release-") -and [System.Convert]::ToBoolean("${{ github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize') }}")
            echo "Pre-release flagged: $($isPreRelease)"
            echo "IS_PRE_RELEASE=$($isPreRelease)" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append

      # checks if pre-release patch version can be determined from existing release tags or if we start at 0
      - name: GitHub Script checks for existing version tags
        id: existing_version
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_NUMBER: ${{ env.RELEASE_VERSION }}
        if: env.IS_PRE_RELEASE == 'True'
        with:
          script: |
            // check for existing tags on this major.minor version
            const tagsList = await github.rest.git.listMatchingRefs({
             owner: context.repo.owner,
             repo: context.repo.repo,
             ref: 'tags'
            });
            
            const { VERSION_NUMBER } = process.env;
            const tags = tagsList.data.reverse();
            
            // assume linear release pattern - i.e. always working on latest major.minor version
            // if there are no tags, or latest tag does not start with VERSION_NUMBER, set a manual version for release
            if (tags.length < 1
                || !tags.shift().ref.startsWith(`refs/tags/${VERSION_NUMBER}`)) {
              core.exportVariable('MANUAL_VERSION', `${VERSION_NUMBER}.0-rc.0`);
            }
            
      # if not a pre release, check if there is a pull request that has closed + merged with the commit SHA of this push
      - name: GitHub Script checks for merged pull request
        id: merged_pull_request
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name == 'push'
        with:
          script: |
            // get all pull requests for this repo
            const pulls = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });

            // get the state of the latest pull request for this repo
            const state = pulls.data[0].state;
            const mergeSHA = pulls.data[0].merge_commit_sha;
            const targetBranchName = pulls.data[0].base.ref;
            
            const IS_RELEASE = (state == 'closed') && (mergeSHA == context.sha) && (targetBranchName.startsWith('release-'));

            console.log(`State: ${state}`);
            console.log(`mergeSHA: ${mergeSHA}`);
            console.log(`pushSHA: ${context.sha}`);
            console.log(`IS_RELEASE: ${IS_RELEASE}`);

            core.exportVariable('IS_RELEASE', `${IS_RELEASE}`);

      # Create a new release to auto-increment (or use manual version number)
      - name: Create new release
        id: create_release
#        uses: keyfactor/action-create-release@upd-deprecated
        uses: keyfactor/action-create-release@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MANUAL_VERSION: ${{ env.MANUAL_VERSION }}
        if: env.IS_PRE_RELEASE == 'True' || env.IS_RELEASE == 'true'
        with:
          release_name: ${{ env.RELEASE_VERSION }}
          body: |
            [Changelog](/./CHANGELOG.md) 
            [Readme](/./README.md) 
            For the latest README.md updates visit the [Main Page](/../main) for this repository
          draft: false
          prerelease: ${{ env.IS_PRE_RELEASE == 'True' }}
          prerelease_suffix: rc
          tag_name: ${{ env.MANUAL_VERSION }}
          auto_increment_type: ${{ (env.IS_PRE_RELEASE == 'True') && 'prerelease' || 'patch' }}
          tag_schema: semantic
          commitish: ${{ github.sha }}
